<launch>
  <arg name="mav_name" default="bebop2"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="dev" default="/dev/input/js2" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="joy_node" pkg="joy" type="joy_node">
      <param name="dev" value="$(arg dev)" />
    </node>
    <!-- <node name="key_joystick" pkg="rotors_joy_interface" type="key_joystick.py" output="screen"  /> -->
    <node name="velocity_control_with_joy" pkg="rotors_gazebo" type="velocity_control_with_joy" output="screen" >
      <rosparam command="load" file="$(find rotors_gazebo)/resource/logitech_f710.yaml" />
      <!-- <rosparam command="load" file="$(find rotors_gazebo)/resource/keyboard.yaml" /> -->
      <!-- <rosparam command="load" file="$(find rotors_gazebo)/resource/ps3.yaml" /> -->
      <!--<remap from="~odom" to="odometry_sensor1/odometry" />-->
      <remap from="~joy_enable" to="joy_enable" />
      <remap from="~odom" to="ground_truth/odometry" />
      <remap from="~joy"  to="joy" />
      <remap from="~command/trajectory" to="command/trajectory" />
      <rosparam> 
        max_vel: 6.0
        max_yawrate: 1.0
      </rosparam>
    </node>
    <node name="velocity_control_by_dronet" pkg="rotors_gazebo" type="velocity_control_by_dronet" output="screen" >
   s   <remap from="~odom" to="ground_truth/odometry" />
      <!-- <remap from="~joy"  to="joy" /> -->
      <remap from="~command/trajectory" to="command/trajectory" />
      <rosparam> 
        max_vel: 1.0
        max_yawrate: 1.5
      </rosparam>
    </node>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="ground_truth/odometry" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <!-- DroNet -->

  <node pkg="dronet_perception" name="dronet_perception" type="dronet_node.py" output="screen" launch-prefix="xterm -e" >   
      <remap from="cnn_predictions" to="/cnn_out/predictions"/>
      <remap from="state_change" to="$(arg mav_name)/state_change"/>
      <remap from="camera" to="$(arg mav_name)/image_raw"/>
      <remap from="land" to="$(arg mav_name)/land"/>
      <param name="json_model_path" value="$(find dronet_perception)/models/model_struct.json"/>
      <param name="weights_path" value="$(find dronet_perception)/models/model_weights_59.h5"/>
      <param name="onboard_images_folder" value="$(find dronet_perception)/onboard_images"/>
      <param name="target_size" value="320,240"/>
      <param name="crop_size" value="200,200"/>
  </node>

  <node pkg="dronet_control" name="dronet_control" type="dronet_control" output="screen" launch-prefix="xterm -e" >   
      <remap from="cnn_predictions" to="/cnn_out/predictions"/>
      <remap from="state_change" to="$(arg mav_name)/state_change"/>
      <remap from="velocity" to="/bebop/cmd_vel/"/>
      <param name="alpha_yaw" value="0.7"/>
      <param name="alpha_velocity" value=".4"/>
      <param name="max_forward_index" value="1.0"/>
      <param name="critical_prob" value="1.3"/>
      <param name="cmd_vel_timeout" value="0.1" />
  </node>

  <node pkg="rostopic" type="rostopic" name="rostopic" args="pub --once /$(arg mav_name)/state_change std_msgs/Bool 'data: false'" />

  <!-- Dashboard & Vis Tools -->

  <node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" />

  <!-- <node pkg="rviz" type="rviz" name="rviz" /> -->
</launch>
