<launch>
  <arg name="mav_name" default="ardrone"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="dev" default="/dev/input/js2" />
  <arg name="gui" default="true" />
  <arg name="max_thrust" default="28.0" />

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="false"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="joy_node" pkg="joy" type="joy_node">
      <param name="dev" value="$(arg dev)" />
    </node>
    <node name="rotors_joy_interface" pkg="rotors_joy_interface" type="rotors_joy_interface" output="screen">
      <param name="max_thrust" value="$(arg max_thrust)" />
    </node>
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
      <rosparam
        command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <!-- <node pkg="dronet_perception" name="dronet_perception" type="dronet_node.py" output="screen" launch-prefix="xterm -e" >   
    <remap from="cnn_predictions" to="$(arg mav_name)/cnn_out/predictions"/>
    <remap from="state_change" to="$(arg mav_name)/state_change"/>
    <remap from="camera" to="$(arg mav_name)/image_raw"/>
    <remap from="land" to="$(arg mav_name)/land"/>
    <param name="json_model_path" value="$(find dronet_perception)/models/model_struct.json"/>
    <param name="weights_path" value="$(find dronet_perception)/models/model_weights_59.h5"/>
    <param name="onboard_images_folder" value="$(find dronet_perception)/onboard_images"/>
    <param name="target_size" value="320,240"/>
    <param name="crop_size" value="200,200"/>
  </node> -->

</launch>
